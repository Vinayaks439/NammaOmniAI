// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: trafficupdaterevents/v1/events.proto

package trafficupdatereventsv1connect

import (
	v1 "backend/gen/trafficupdaterevents/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TrafficUpdateEventsServiceName is the fully-qualified name of the TrafficUpdateEventsService
	// service.
	TrafficUpdateEventsServiceName = "trafficupdaterevents.v1.TrafficUpdateEventsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TrafficUpdateEventsServiceStreamTrafficUpdateEventsProcedure is the fully-qualified name of the
	// TrafficUpdateEventsService's StreamTrafficUpdateEvents RPC.
	TrafficUpdateEventsServiceStreamTrafficUpdateEventsProcedure = "/trafficupdaterevents.v1.TrafficUpdateEventsService/StreamTrafficUpdateEvents"
)

// TrafficUpdateEventsServiceClient is a client for the
// trafficupdaterevents.v1.TrafficUpdateEventsService service.
type TrafficUpdateEventsServiceClient interface {
	// StreamTrafficUpdateEvents establishes a grpc-web streaming endpoint that pushes StreamTrafficUpdateEventsResponse messages.
	StreamTrafficUpdateEvents(context.Context, *connect.Request[v1.StreamTrafficUpdateEventsRequest]) (*connect.ServerStreamForClient[v1.StreamTrafficUpdateEventsResponse], error)
}

// NewTrafficUpdateEventsServiceClient constructs a client for the
// trafficupdaterevents.v1.TrafficUpdateEventsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrafficUpdateEventsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TrafficUpdateEventsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	trafficUpdateEventsServiceMethods := v1.File_trafficupdaterevents_v1_events_proto.Services().ByName("TrafficUpdateEventsService").Methods()
	return &trafficUpdateEventsServiceClient{
		streamTrafficUpdateEvents: connect.NewClient[v1.StreamTrafficUpdateEventsRequest, v1.StreamTrafficUpdateEventsResponse](
			httpClient,
			baseURL+TrafficUpdateEventsServiceStreamTrafficUpdateEventsProcedure,
			connect.WithSchema(trafficUpdateEventsServiceMethods.ByName("StreamTrafficUpdateEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// trafficUpdateEventsServiceClient implements TrafficUpdateEventsServiceClient.
type trafficUpdateEventsServiceClient struct {
	streamTrafficUpdateEvents *connect.Client[v1.StreamTrafficUpdateEventsRequest, v1.StreamTrafficUpdateEventsResponse]
}

// StreamTrafficUpdateEvents calls
// trafficupdaterevents.v1.TrafficUpdateEventsService.StreamTrafficUpdateEvents.
func (c *trafficUpdateEventsServiceClient) StreamTrafficUpdateEvents(ctx context.Context, req *connect.Request[v1.StreamTrafficUpdateEventsRequest]) (*connect.ServerStreamForClient[v1.StreamTrafficUpdateEventsResponse], error) {
	return c.streamTrafficUpdateEvents.CallServerStream(ctx, req)
}

// TrafficUpdateEventsServiceHandler is an implementation of the
// trafficupdaterevents.v1.TrafficUpdateEventsService service.
type TrafficUpdateEventsServiceHandler interface {
	// StreamTrafficUpdateEvents establishes a grpc-web streaming endpoint that pushes StreamTrafficUpdateEventsResponse messages.
	StreamTrafficUpdateEvents(context.Context, *connect.Request[v1.StreamTrafficUpdateEventsRequest], *connect.ServerStream[v1.StreamTrafficUpdateEventsResponse]) error
}

// NewTrafficUpdateEventsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrafficUpdateEventsServiceHandler(svc TrafficUpdateEventsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	trafficUpdateEventsServiceMethods := v1.File_trafficupdaterevents_v1_events_proto.Services().ByName("TrafficUpdateEventsService").Methods()
	trafficUpdateEventsServiceStreamTrafficUpdateEventsHandler := connect.NewServerStreamHandler(
		TrafficUpdateEventsServiceStreamTrafficUpdateEventsProcedure,
		svc.StreamTrafficUpdateEvents,
		connect.WithSchema(trafficUpdateEventsServiceMethods.ByName("StreamTrafficUpdateEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/trafficupdaterevents.v1.TrafficUpdateEventsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TrafficUpdateEventsServiceStreamTrafficUpdateEventsProcedure:
			trafficUpdateEventsServiceStreamTrafficUpdateEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTrafficUpdateEventsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTrafficUpdateEventsServiceHandler struct{}

func (UnimplementedTrafficUpdateEventsServiceHandler) StreamTrafficUpdateEvents(context.Context, *connect.Request[v1.StreamTrafficUpdateEventsRequest], *connect.ServerStream[v1.StreamTrafficUpdateEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("trafficupdaterevents.v1.TrafficUpdateEventsService.StreamTrafficUpdateEvents is not implemented"))
}
