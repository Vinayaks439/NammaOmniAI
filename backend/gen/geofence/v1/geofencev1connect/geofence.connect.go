// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: geofence/v1/geofence.proto

package geofencev1connect

import (
	v1 "backend/gen/geofence/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GeofencingServiceName is the fully-qualified name of the GeofencingService service.
	GeofencingServiceName = "geofence.v1.GeofencingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GeofencingServiceSendLocalitiesProcedure is the fully-qualified name of the GeofencingService's
	// SendLocalities RPC.
	GeofencingServiceSendLocalitiesProcedure = "/geofence.v1.GeofencingService/SendLocalities"
)

// GeofencingServiceClient is a client for the geofence.v1.GeofencingService service.
type GeofencingServiceClient interface {
	// Sends all detected localities to the server in one batch :contentReference[oaicite:1]{index=1}.
	SendLocalities(context.Context, *connect.Request[v1.SendLocalitiesRequest]) (*connect.Response[v1.SendLocalitiesResponse], error)
}

// NewGeofencingServiceClient constructs a client for the geofence.v1.GeofencingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGeofencingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GeofencingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	geofencingServiceMethods := v1.File_geofence_v1_geofence_proto.Services().ByName("GeofencingService").Methods()
	return &geofencingServiceClient{
		sendLocalities: connect.NewClient[v1.SendLocalitiesRequest, v1.SendLocalitiesResponse](
			httpClient,
			baseURL+GeofencingServiceSendLocalitiesProcedure,
			connect.WithSchema(geofencingServiceMethods.ByName("SendLocalities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// geofencingServiceClient implements GeofencingServiceClient.
type geofencingServiceClient struct {
	sendLocalities *connect.Client[v1.SendLocalitiesRequest, v1.SendLocalitiesResponse]
}

// SendLocalities calls geofence.v1.GeofencingService.SendLocalities.
func (c *geofencingServiceClient) SendLocalities(ctx context.Context, req *connect.Request[v1.SendLocalitiesRequest]) (*connect.Response[v1.SendLocalitiesResponse], error) {
	return c.sendLocalities.CallUnary(ctx, req)
}

// GeofencingServiceHandler is an implementation of the geofence.v1.GeofencingService service.
type GeofencingServiceHandler interface {
	// Sends all detected localities to the server in one batch :contentReference[oaicite:1]{index=1}.
	SendLocalities(context.Context, *connect.Request[v1.SendLocalitiesRequest]) (*connect.Response[v1.SendLocalitiesResponse], error)
}

// NewGeofencingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGeofencingServiceHandler(svc GeofencingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	geofencingServiceMethods := v1.File_geofence_v1_geofence_proto.Services().ByName("GeofencingService").Methods()
	geofencingServiceSendLocalitiesHandler := connect.NewUnaryHandler(
		GeofencingServiceSendLocalitiesProcedure,
		svc.SendLocalities,
		connect.WithSchema(geofencingServiceMethods.ByName("SendLocalities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/geofence.v1.GeofencingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GeofencingServiceSendLocalitiesProcedure:
			geofencingServiceSendLocalitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGeofencingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGeofencingServiceHandler struct{}

func (UnimplementedGeofencingServiceHandler) SendLocalities(context.Context, *connect.Request[v1.SendLocalitiesRequest]) (*connect.Response[v1.SendLocalitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("geofence.v1.GeofencingService.SendLocalities is not implemented"))
}
