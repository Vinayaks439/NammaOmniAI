// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cultureeventsmanagement/v1/events.proto

package cultureeventsmanagementv1connect

import (
	v1 "backend/gen/cultureeventsmanagement/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CulturalEventsManagementServiceName is the fully-qualified name of the
	// CulturalEventsManagementService service.
	CulturalEventsManagementServiceName = "cultureeventsmanagement.v1.CulturalEventsManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CulturalEventsManagementServiceStreamCulturalEventsManagementEventsProcedure is the
	// fully-qualified name of the CulturalEventsManagementService's
	// StreamCulturalEventsManagementEvents RPC.
	CulturalEventsManagementServiceStreamCulturalEventsManagementEventsProcedure = "/cultureeventsmanagement.v1.CulturalEventsManagementService/StreamCulturalEventsManagementEvents"
)

// CulturalEventsManagementServiceClient is a client for the
// cultureeventsmanagement.v1.CulturalEventsManagementService service.
type CulturalEventsManagementServiceClient interface {
	// StreamCulturalEventsManagementEvents establishes a grpc-web streaming endpoint that pushes StreamCulturalEventsManagementEventsResponse messages.
	StreamCulturalEventsManagementEvents(context.Context, *connect.Request[v1.StreamCulturalEventsManagementEventsRequest]) (*connect.ServerStreamForClient[v1.StreamCulturalEventsManagementEventsResponse], error)
}

// NewCulturalEventsManagementServiceClient constructs a client for the
// cultureeventsmanagement.v1.CulturalEventsManagementService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCulturalEventsManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CulturalEventsManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	culturalEventsManagementServiceMethods := v1.File_cultureeventsmanagement_v1_events_proto.Services().ByName("CulturalEventsManagementService").Methods()
	return &culturalEventsManagementServiceClient{
		streamCulturalEventsManagementEvents: connect.NewClient[v1.StreamCulturalEventsManagementEventsRequest, v1.StreamCulturalEventsManagementEventsResponse](
			httpClient,
			baseURL+CulturalEventsManagementServiceStreamCulturalEventsManagementEventsProcedure,
			connect.WithSchema(culturalEventsManagementServiceMethods.ByName("StreamCulturalEventsManagementEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// culturalEventsManagementServiceClient implements CulturalEventsManagementServiceClient.
type culturalEventsManagementServiceClient struct {
	streamCulturalEventsManagementEvents *connect.Client[v1.StreamCulturalEventsManagementEventsRequest, v1.StreamCulturalEventsManagementEventsResponse]
}

// StreamCulturalEventsManagementEvents calls
// cultureeventsmanagement.v1.CulturalEventsManagementService.StreamCulturalEventsManagementEvents.
func (c *culturalEventsManagementServiceClient) StreamCulturalEventsManagementEvents(ctx context.Context, req *connect.Request[v1.StreamCulturalEventsManagementEventsRequest]) (*connect.ServerStreamForClient[v1.StreamCulturalEventsManagementEventsResponse], error) {
	return c.streamCulturalEventsManagementEvents.CallServerStream(ctx, req)
}

// CulturalEventsManagementServiceHandler is an implementation of the
// cultureeventsmanagement.v1.CulturalEventsManagementService service.
type CulturalEventsManagementServiceHandler interface {
	// StreamCulturalEventsManagementEvents establishes a grpc-web streaming endpoint that pushes StreamCulturalEventsManagementEventsResponse messages.
	StreamCulturalEventsManagementEvents(context.Context, *connect.Request[v1.StreamCulturalEventsManagementEventsRequest], *connect.ServerStream[v1.StreamCulturalEventsManagementEventsResponse]) error
}

// NewCulturalEventsManagementServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCulturalEventsManagementServiceHandler(svc CulturalEventsManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	culturalEventsManagementServiceMethods := v1.File_cultureeventsmanagement_v1_events_proto.Services().ByName("CulturalEventsManagementService").Methods()
	culturalEventsManagementServiceStreamCulturalEventsManagementEventsHandler := connect.NewServerStreamHandler(
		CulturalEventsManagementServiceStreamCulturalEventsManagementEventsProcedure,
		svc.StreamCulturalEventsManagementEvents,
		connect.WithSchema(culturalEventsManagementServiceMethods.ByName("StreamCulturalEventsManagementEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cultureeventsmanagement.v1.CulturalEventsManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CulturalEventsManagementServiceStreamCulturalEventsManagementEventsProcedure:
			culturalEventsManagementServiceStreamCulturalEventsManagementEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCulturalEventsManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCulturalEventsManagementServiceHandler struct{}

func (UnimplementedCulturalEventsManagementServiceHandler) StreamCulturalEventsManagementEvents(context.Context, *connect.Request[v1.StreamCulturalEventsManagementEventsRequest], *connect.ServerStream[v1.StreamCulturalEventsManagementEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cultureeventsmanagement.v1.CulturalEventsManagementService.StreamCulturalEventsManagementEvents is not implemented"))
}
