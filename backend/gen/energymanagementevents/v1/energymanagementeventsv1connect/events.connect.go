// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: energymanagementevents/v1/events.proto

package energymanagementeventsv1connect

import (
	v1 "backend/gen/energymanagementevents/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnergyManagementEventsServiceName is the fully-qualified name of the
	// EnergyManagementEventsService service.
	EnergyManagementEventsServiceName = "energymanagementevents.v1.EnergyManagementEventsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnergyManagementEventsServiceStreamEnergyManagementEventsProcedure is the fully-qualified name of
	// the EnergyManagementEventsService's StreamEnergyManagementEvents RPC.
	EnergyManagementEventsServiceStreamEnergyManagementEventsProcedure = "/energymanagementevents.v1.EnergyManagementEventsService/StreamEnergyManagementEvents"
)

// EnergyManagementEventsServiceClient is a client for the
// energymanagementevents.v1.EnergyManagementEventsService service.
type EnergyManagementEventsServiceClient interface {
	// StreamEnergyManagementEvents establishes a grpc-web streaming endpoint that pushes StreamEnergyManagementEventsResponse messages.
	StreamEnergyManagementEvents(context.Context, *connect.Request[v1.StreamEnergyManagementEventsRequest]) (*connect.ServerStreamForClient[v1.StreamEnergyManagementEventsResponse], error)
}

// NewEnergyManagementEventsServiceClient constructs a client for the
// energymanagementevents.v1.EnergyManagementEventsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnergyManagementEventsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnergyManagementEventsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	energyManagementEventsServiceMethods := v1.File_energymanagementevents_v1_events_proto.Services().ByName("EnergyManagementEventsService").Methods()
	return &energyManagementEventsServiceClient{
		streamEnergyManagementEvents: connect.NewClient[v1.StreamEnergyManagementEventsRequest, v1.StreamEnergyManagementEventsResponse](
			httpClient,
			baseURL+EnergyManagementEventsServiceStreamEnergyManagementEventsProcedure,
			connect.WithSchema(energyManagementEventsServiceMethods.ByName("StreamEnergyManagementEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// energyManagementEventsServiceClient implements EnergyManagementEventsServiceClient.
type energyManagementEventsServiceClient struct {
	streamEnergyManagementEvents *connect.Client[v1.StreamEnergyManagementEventsRequest, v1.StreamEnergyManagementEventsResponse]
}

// StreamEnergyManagementEvents calls
// energymanagementevents.v1.EnergyManagementEventsService.StreamEnergyManagementEvents.
func (c *energyManagementEventsServiceClient) StreamEnergyManagementEvents(ctx context.Context, req *connect.Request[v1.StreamEnergyManagementEventsRequest]) (*connect.ServerStreamForClient[v1.StreamEnergyManagementEventsResponse], error) {
	return c.streamEnergyManagementEvents.CallServerStream(ctx, req)
}

// EnergyManagementEventsServiceHandler is an implementation of the
// energymanagementevents.v1.EnergyManagementEventsService service.
type EnergyManagementEventsServiceHandler interface {
	// StreamEnergyManagementEvents establishes a grpc-web streaming endpoint that pushes StreamEnergyManagementEventsResponse messages.
	StreamEnergyManagementEvents(context.Context, *connect.Request[v1.StreamEnergyManagementEventsRequest], *connect.ServerStream[v1.StreamEnergyManagementEventsResponse]) error
}

// NewEnergyManagementEventsServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnergyManagementEventsServiceHandler(svc EnergyManagementEventsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	energyManagementEventsServiceMethods := v1.File_energymanagementevents_v1_events_proto.Services().ByName("EnergyManagementEventsService").Methods()
	energyManagementEventsServiceStreamEnergyManagementEventsHandler := connect.NewServerStreamHandler(
		EnergyManagementEventsServiceStreamEnergyManagementEventsProcedure,
		svc.StreamEnergyManagementEvents,
		connect.WithSchema(energyManagementEventsServiceMethods.ByName("StreamEnergyManagementEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/energymanagementevents.v1.EnergyManagementEventsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnergyManagementEventsServiceStreamEnergyManagementEventsProcedure:
			energyManagementEventsServiceStreamEnergyManagementEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnergyManagementEventsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnergyManagementEventsServiceHandler struct{}

func (UnimplementedEnergyManagementEventsServiceHandler) StreamEnergyManagementEvents(context.Context, *connect.Request[v1.StreamEnergyManagementEventsRequest], *connect.ServerStream[v1.StreamEnergyManagementEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("energymanagementevents.v1.EnergyManagementEventsService.StreamEnergyManagementEvents is not implemented"))
}
